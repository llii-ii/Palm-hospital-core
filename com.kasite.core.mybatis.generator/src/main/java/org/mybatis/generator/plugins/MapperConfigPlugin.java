package org.mybatis.generator.plugins;

import org.mybatis.generator.internal.util.*;
import org.mybatis.generator.internal.util.messages.*;
import org.mybatis.generator.api.dom.xml.*;
import java.util.*;
import org.mybatis.generator.api.*;
import java.io.*;

public class MapperConfigPlugin extends PluginAdapter
{
    private List<String> mapperFiles;
    
    public MapperConfigPlugin() {
        this.mapperFiles = new ArrayList<String>();
    }
    
    @Override
    public boolean validate(final List<String> warnings) {
        boolean valid = true;
        if (!StringUtility.stringHasValue(this.properties.getProperty("targetProject"))) {
            warnings.add(Messages.getString("ValidationError.18", "MapperConfigPlugin", "targetProject"));
            valid = false;
        }
        if (!StringUtility.stringHasValue(this.properties.getProperty("targetPackage"))) {
            warnings.add(Messages.getString("ValidationError.18", "MapperConfigPlugin", "targetPackage"));
            valid = false;
        }
        return valid;
    }
    
    @Override
    public List<GeneratedXmlFile> contextGenerateAdditionalXmlFiles() {
        final Document document = new Document("-//mybatis.org//DTD Config 3.0//EN", "http://mybatis.org/dtd/mybatis-3-config.dtd");
        if (this.mapperFiles.isEmpty()) {
            return Collections.emptyList();
        }
        final XmlElement root = new XmlElement("configuration");
        document.setRootElement(root);
        root.addElement(new TextElement("<!--"));
        root.addElement(new TextElement("  This file is generated by MyBatis Generator."));
        root.addElement(new TextElement("  This file is the shell of a Mapper Config file - in many cases you will need to add"));
        root.addElement(new TextElement("    to this file before it is usable by MyBatis."));
        final StringBuilder sb = new StringBuilder();
        sb.append("  This file was generated on ");
        sb.append(new Date());
        sb.append('.');
        root.addElement(new TextElement(sb.toString()));
        root.addElement(new TextElement("-->"));
        final XmlElement mappers = new XmlElement("mappers");
        root.addElement(mappers);
        for (final String mapperFile : this.mapperFiles) {
            final XmlElement mapper = new XmlElement("mapper");
            mapper.addAttribute(new Attribute("resource", mapperFile));
            mappers.addElement(mapper);
        }
        final GeneratedXmlFile gxf = new GeneratedXmlFile(document, this.properties.getProperty("fileName", "MapperConfig.xml"), this.properties.getProperty("targetPackage"), this.properties.getProperty("targetProject"), false, this.context.getXmlFormatter());
        final List<GeneratedXmlFile> answer = new ArrayList<GeneratedXmlFile>(1);
        answer.add(gxf);
        return answer;
    }
    
    @Override
    public boolean sqlMapGenerated(final GeneratedXmlFile sqlMap, final IntrospectedTable introspectedTable) {
        final StringBuilder sb = new StringBuilder();
        sb.append(sqlMap.getTargetPackage());
        sb.append('.');
        final String temp = sb.toString();
        sb.setLength(0);
        sb.append(temp.replace('.', '/'));
        sb.append(sqlMap.getFileName());
        this.mapperFiles.add(sb.toString());
        return true;
    }
}
